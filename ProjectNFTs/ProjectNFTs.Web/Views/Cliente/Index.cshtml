@using X.PagedList
@using X.PagedList.Mvc.Core
@model IEnumerable<ProjectNFTs.Application.DTOs.ClienteDTO>

@{
    ViewData["Title"] = "Index";
}
<script src="/js/pais.js" asp-append-version="true"></script>


<h1>Listado de Clientes</h1>

<form asp-controller="Cliente" asp-action="List" method="get">
    <div class="d-flex align-items-center justify-content-between">
        <a asp-action="Create" asp-controller="Cliente" class="btn btn-primary bi-plus-circle">Agregar Cliente</a>
        <div class="d-flex flex-row-reverse">
            <div class="px-2">
                <button type="submit" class="btn btn-info bi bi-search">Buscar</button>
            </div>
            <div>
                <input type="text" name="nombre" id="nombre" class="form-control mr-2" placeholder="Nombre del Cliente" />
            </div>
        </div>
    </div>
</form>


<table id="sortable" class="table table-striped table-hover table-responsive-md table-sm mt-3" style="border-radius: 5px; overflow: hidden; font-size:medium">
    <thead style="background-color: black; color: #fff; cursor:pointer; text-align: left;">
        <tr style="text-align: center;">
            <th onclick="sortBy(0)">
                @Html.DisplayNameFor(model => model.Nombre)
            </th>
            <th onclick="sortBy(1)">
                @Html.DisplayNameFor(model => model.Apellido1)
            </th>
            <th onclick="sortBy(2)">
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th onclick="sortBy(3)">
                @Html.DisplayNameFor(model => model.Sexo)
            </th>
            <th onclick="sortBy(4)">
                @Html.DisplayNameFor(model => model.FechaDeNacimiento)
            </th>
            <th style="text-align: center;">Opciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr id="row_@item.IdCliente" style="text-align: center;">
                <td>
                    @Html.DisplayFor(modelItem => item.Nombre)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Apellido1)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @{
                        string sexo;
                        if (item.Sexo.Equals("F"))
                        {
                            sexo = "Femenino";
                        }
                        else if (item.Sexo.Equals("M"))
                        {
                            sexo = "Masculino";
                        }
                        else
                        {
                            sexo = "Otro";
                        }
                        @Html.Raw(sexo)
                        ;
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FechaDeNacimiento)
                </td>
                <td style="text-align: center;">
                    <button type="button" class="btn btn-success bi-pencil-square" onclick="editarCliente('@item.IdCliente')">Editar</button> |
                    <a data-ajax="true" class="btn btn-secondary  bi-info-circle"
                       data-ajax-complete="onComplete"
                       data-ajax-mode="replace"
                       href='@Url.Action("_Details", "Cliente", new { id  = item.IdCliente })'>
                        Detalles
                    </a> |
                    <button type="button" class="btn btn-danger bi bi-trash" onclick="deleteItem('@item.IdCliente', '@item.Nombre')">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@Html.PagedListPager((IPagedList)Model, page =>
                Url.Action("Index", new { page }), new PagedListRenderOptions
            {
                Display = PagedListDisplayMode.Always,
                MaximumPageNumbersToDisplay = 5,
                LiElementClasses = new String[] { "page-item" },
                PageClasses = new String[] { "page-link" }
            })


<br />
<div id="contenedor"></div>
<div id="loader" class="xxxx"></div>
<br />

@section scripts {
    <style>

        /* Estilo para los enlaces de paginación */
        .page-link {
            color: #007bff;
            background-color: transparent;
            border: 1px solid #007bff;
            padding: 8px 16px;
            text-decoration: none;
            transition: background-color 0.3s, color 0.3s;
        }

            /* Estilo para los enlaces de paginación en estado de hover */
            .page-link:hover {
                background-color: #007bff;
                border: 1px solid #007bff;
                color: #fff;
            }

        /* Estilo para el enlace de la página activa */
        .page-item.active .page-link {
            background-color: #007bff;
            color: #fff;
            border-color: #007bff;
        }

    </style>

    <script type="text/javascript">

        function onComplete(data) {
            Swal.fire({
                title: 'Detalles ',
                html: data.responseText,
                showDenyButton: false,
                showOkButton: false,
                showCancelButton: false,
            })
        };
        function deleteItem(id, name) {
            Swal.fire({
                title: '¿Eliminar cliente?',
                html: '¿Estás seguro de que quieres eliminar al cliente <strong>' + name + '</strong>?<br>Esta acción no se puede deshacer.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Sí, eliminarlo',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    const myRequest = "/Cliente/DeleteConfirm?id=" + id;
                    fetch(myRequest, {
                        method: 'POST',
                    }).then((response) => response.text())
                        .then((text) => {
                            console.log(text);
                            // Eliminar la fila correspondiente de la tabla
                            onBegin();
                            setTimeout(function () {
                                // Eliminar la fila correspondiente de la tabla
                                document.getElementById('row_' + id).remove();

                                document.getElementById("loader").className = "xxxx";
                                toastr.error('Se ha eliminado el registro correctamente', 'Atención');
                            }, 1000);
                        });
                }
            });
        }

        function onBegin() {
            console.log("onBegin")
            document.getElementById("loader").className = "loading";
        }

        function editarCliente(id) {
            // Redireccionar al usuario a la página de edición con el ID del cliente
            window.location.href = "/Cliente/Edit/" + id;
        };

    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}