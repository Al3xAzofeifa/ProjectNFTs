@using X.PagedList
@using X.PagedList.Mvc.Core

@model IEnumerable<ProjectNFTs.Application.DTOs.NftDTO>

@{
    ViewData["Title"] = "Index";
}

<h1>Listado de NFTs</h1>


<form asp-controller="Nft" asp-action="List" method="get">
    <div class="d-flex align-items-center justify-content-between">
        <a asp-action="Create" asp-controller="Nft" class="btn btn-primary bi-plus-circle">&nbsp;Agregar NFT</a>
        <div class="d-flex flex-row-reverse">
            <div class="px-2">
                <button type="submit" class="btn btn-info bi bi-search">Buscar</button>
            </div>
            <div>
                <input type="text" name="nombre" id="nombre" class="form-control mr-2" placeholder="Autor del NFT" />
            </div>
        </div>
    </div>
</form>

<table id="sortable" class="table table-striped table-hover table-responsive-md table-sm mt-3" style="border-radius: 5px; overflow: hidden; font-size:medium">
    <thead style="background-color: black; color: #fff; cursor:pointer; text-align: left;">
        <tr style="text-align: center;">
            <th onclick="sortBy(0)">
                @Html.DisplayNameFor(model => model.Nombre)
            </th>
            <th onclick="sortBy(1)">
                @Html.DisplayNameFor(model => model.Autor)
            </th>
            <th onclick="sortBy(2)">
                @Html.DisplayNameFor(model => model.Valor)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CantidadInventario)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Imagen)
            </th>
            <th style="text-align: center;">Opciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr id="row_@item.Id" style="text-align: center;">
                <td>
                    @Html.DisplayFor(modelItem => item.Nombre)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Autor)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Valor) ETH
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CantidadInventario)
                </td>
                <td>
                    <div class="imagen-container">
                        <img src="data:image/jpeg;charset=utf-8;base64,
                            @Convert.ToBase64String(item.Imagen)" style="height:75px;width:75px; cursor:pointer; border-radius:5px; " class="zoom2">
                    </div>

                </td>
                <td style="text-align: center;">
                    <button type="button" class="btn btn-success bi-pencil-square" onclick="editarNft('@item.Id')">Editar</button> |
                    <a data-ajax="true" class="btn btn-secondary  bi-info-circle"
                       data-ajax-complete="onComplete"
                       data-ajax-mode="replace"
                       href='@Url.Action("_Details", "Nft", new { id  = item.Id })'>
                        Detalles
                    </a> |
                    <button type="button" class="btn btn-danger bi bi-trash" onclick="deleteItem('@item.Id', '@item.Nombre')">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@Html.PagedListPager((IPagedList)Model, page =>
        Url.Action("Index", new { page }), new PagedListRenderOptions
    {
        Display = PagedListDisplayMode.Always,
        MaximumPageNumbersToDisplay = 5,
        LiElementClasses = new String[] { "page-item" },
        PageClasses = new String[] { "page-link" }
    })


<br />
<div id="contenedor"></div>
<div id="loader" class="xxxx"></div>
<br />

@section scripts {
    <style>

        /* Estilo para los enlaces de paginación */
        .page-link {
            color: #007bff;
            background-color: transparent;
            border: 1px solid #007bff;
            padding: 8px 16px;
            text-decoration: none;
            transition: background-color 0.3s, color 0.3s;
        }

            /* Estilo para los enlaces de paginación en estado de hover */
            .page-link:hover {
                background-color: #007bff;
                border: 1px solid #007bff;
                color: #fff;
            }

        /* Estilo para el enlace de la página activa */
        .page-item.active .page-link {
            background-color: #007bff;
            color: #fff;
            border-color: #007bff;
        }

    </style>
    <script type="text/javascript">

        function onComplete(data) {
            Swal.fire({
                title: 'Detalles ',
                html: data.responseText,
                showDenyButton: false,
                showOkButton: false,
                showCancelButton: false,
            })
        };
        function deleteItem(id, name) {
            Swal.fire({
                title: '¿Eliminar NFT?',
                html: '¿Estás seguro de que quieres eliminar al NFT <strong>' + name + '</strong>?<br>Esta acción no se puede deshacer.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Sí, eliminarlo',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    const myRequest = "/Nft/DeleteConfirm?id=" + id;
                    fetch(myRequest, {
                        method: 'POST',
                    }).then((response) => response.text())
                        .then((text) => {
                            console.log(text);

                            onBegin();
                            setTimeout(function () {
                                // Eliminar la fila correspondiente de la tabla
                                document.getElementById('row_' + id).remove();

                                document.getElementById("loader").className = "xxxx";
                                toastr.error('Se ha eliminado el registro correctamente', 'Atención');
                            }, 1000);
                        });
                }
            });
        }

        function onBegin() {
            console.log("onBegin")
            document.getElementById("loader").className = "loading";
        }

        function editarNft(id) {
            // Redireccionar al usuario a la página de edición con el ID del NFT
            window.location.href = "/Nft/Edit/" + id;
        };

        // Captura el clic en la imagen y muestra la imagen ampliada en pantalla completa
        document.getElementById('sortable').addEventListener('click', function (event) {
            if (event.target.classList.contains('zoom2')) {
                var imagenAmpliadaContainer = document.createElement('div');
                imagenAmpliadaContainer.id = 'imagenAmpliadaContainer';
                document.body.appendChild(imagenAmpliadaContainer);

                var imagenAmpliada = document.createElement('img');
                imagenAmpliada.id = 'imagenAmpliada';
                imagenAmpliada.src = event.target.src;
                imagenAmpliada.alt = 'NFT Image';
                imagenAmpliadaContainer.appendChild(imagenAmpliada);

                // Esperamos un corto tiempo antes de cambiar la opacidad para permitir la transición suave
                setTimeout(function () {
                    imagenAmpliadaContainer.style.opacity = '1';
                }, 50);

                // Cierra la imagen ampliada al hacer clic fuera de ella
                imagenAmpliadaContainer.addEventListener('click', function () {
                    imagenAmpliadaContainer.style.opacity = '0'; // Primero, hacemos que la opacidad sea 0 para la transición de salida
                    setTimeout(function () {
                        imagenAmpliadaContainer.remove(); // Luego, eliminamos el contenedor de la imagen ampliada después de la transición
                    }, 300);
                });
            }
        });

    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
